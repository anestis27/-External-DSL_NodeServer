/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator

import java.util.ArrayList
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.And
import org.xtext.example.mydsl.myDsl.ArrayType
import org.xtext.example.mydsl.myDsl.BasicType
import org.xtext.example.mydsl.myDsl.BoolConstant
import org.xtext.example.mydsl.myDsl.BoolType
import org.xtext.example.mydsl.myDsl.Comparison
import org.xtext.example.mydsl.myDsl.Entity
import org.xtext.example.mydsl.myDsl.EntityType
import org.xtext.example.mydsl.myDsl.Equality
import org.xtext.example.mydsl.myDsl.Expression
import org.xtext.example.mydsl.myDsl.IntConstant
import org.xtext.example.mydsl.myDsl.IntType
import org.xtext.example.mydsl.myDsl.Member
import org.xtext.example.mydsl.myDsl.Minus
import org.xtext.example.mydsl.myDsl.MulOrDiv
import org.xtext.example.mydsl.myDsl.Not
import org.xtext.example.mydsl.myDsl.Or
import org.xtext.example.mydsl.myDsl.Plus
import org.xtext.example.mydsl.myDsl.Rule
import org.xtext.example.mydsl.myDsl.StringConstant
import org.xtext.example.mydsl.myDsl.StringType
import org.xtext.example.mydsl.myDsl.VariableConstant
import org.xtext.example.mydsl.myDsl.Verb

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var verbs = new ArrayList()
		var entities = new ArrayList()
		var serverEntities = new ArrayList() 
		//serverEntities.add(resource.allContents.toIterable.filter(typeof(Entity)).get(0))
		for(a : resource.allContents.toIterable.filter(typeof(Entity))){
			if(a.is!==null){
				serverEntities.add(a)
			}
		}
		
		for (e : resource.allContents.toIterable.filter(typeof(Member))) {
			switch (e) {
				Entity: {
					fsa.generateFile(
						e.name + ".js",
						e.compile
					)
					entities.add(e)
				}
				Verb:
					verbs.add(e)
			}
		}
		
		//Checking about ServerEntity name on Verb
		var serverNames = new ArrayList()
		for(e : serverEntities){
			serverNames.add(e.name)
		}
		for(v: verbs){
			if (!serverNames.contains(v.qa)) {
				throw new Error("One or more Verbs have wrong ServerEntity name.")
			}
		}
		
		

		fsa.generateFile("Main.js", '''
			const Express = require('express')
			const app = Express();
			var http = require('http').Server(app);
			
			«FOR e : entities»
				const «e.name» = require("./«e.name».js")
			«ENDFOR»
			
				«FOR v : verbs»
					«v.generateVerb()»
				«ENDFOR»
			
			«FOR  ent : serverEntities»
			http.listen(«ent.name».PORT, «ent.name».DOMAIN, function () 
					{
					    console.log('listening on port ' + «ent.name».PORT + ' on Domain:' + «ent.name».DOMAIN)
					})
					
			
			setInterval(resetRequestAmount, 2000)
			
			function resetRequestAmount(){
				«ent.name».amountOfRequests = 0
			}
			«ENDFOR»
		''')
	}

	def compile(Entity entity) {
		'''
			var «entity.name» = {}
			«FOR attribute : entity.attributes»
				«generateAttribute(attribute.value.elementType,entity.name,attribute.name)»
			«ENDFOR»
			module.exports = «entity.name»
		'''

	}

	def dispatch generateAttribute(EntityType entityType, String entityName, String attributeName) {
		'''
			«entityName».«attributeName» = require("./«entityType.entity.name»")
		'''
	}

	def dispatch generateAttribute(BasicType basicType, String entityName, String attributeName) {
		'''
			«entityName».«attributeName» = «basicType.checkBasicType»
		'''
	}

	def dispatch generateAttribute(ArrayType arrayType, String entityName, String attributeName) {
		'''
			«entityName».«attributeName» = [«FOR ae : arrayType.arrayElements» «ae.value.checkBasicType», «ENDFOR»]
		'''
	}

	def generateVerb(Verb verb) {
		'''
			«FOR rule : verb.rules»
				«FOR url : rule.url.arrayElements»
					«var bt = url.value»
					«var urlValue = switch(bt){
						StringType: bt.value
						default: throw new Exception("URL has to be of type StringType")
			}»
					
					app.«verb.verb»("/«urlValue»",
							function (req, res){
								«verb.qa».amountOfRequests++;
								«rule.checkCondition»
							}
					)
				«ENDFOR»
			«ENDFOR»
		'''
	}

	def checkCondition(Rule rule) {
		'''
			if(«rule.condition.expression.generateExpression»){
				res.send("Welcome to our External DSL!")
			} else
				res.status(400).send("bad request");
		'''
	}

	def String generateExpression(Expression exp) {
		// var exp = rule.condition.expression
		switch (exp) {
			IntConstant: '''«exp.value»'''
			VariableConstant: '''«(exp.value.eContainer as Entity).name».«exp.value.name»'''
			BoolConstant: '''«Boolean::parseBoolean(exp.value)»'''
			StringConstant: '''"«exp.value»"'''
			Not: '''!«(exp.expression.generateExpression)»'''
			MulOrDiv: {
				val left = exp.left.generateExpression
				val right = exp.right.generateExpression
				if (exp.op == '*')
					'''«left» * «right»''' // left * right
				else
					'''«left» / «right»'''
			}
			Minus: '''«(exp.left.generateExpression)» - «(exp.right.generateExpression)»'''
			Plus: {
				'''«(exp.left.generateExpression)» + «(exp.right.generateExpression)»'''
			}
			Equality: {
				if (exp.op == '==')
					'''«(exp.left.generateExpression)» == «(exp.right.generateExpression)»'''
				else
					'''«(exp.left.generateExpression)» != «(exp.right.generateExpression)»'''
			}
			And: {
				'''«(exp.left.generateExpression)» && «(exp.right.generateExpression)»'''
			}
			Or: {
				'''«(exp.left.generateExpression)» || «(exp.right.generateExpression)»'''
			}
			Comparison: {
				val left = exp.left.generateExpression
				val right = exp.right.generateExpression

				switch (exp.op) {
					case '<': '''«left» < «right»'''
					case '>': '''«left» > «right»'''
					case '>=': '''«left» >= «right»'''
					case '<=': '''«left» <= «right»'''
					default:
						""
				}
			}
		}
	}

	def checkBasicType(BasicType bt) {
		switch (bt) {
			IntType:
				bt.value
			StringType: '''"«bt.value»"'''
			BoolType:
				bt.value
		}
	}
}