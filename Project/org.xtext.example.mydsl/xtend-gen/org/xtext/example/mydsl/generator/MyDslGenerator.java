/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.And;
import org.xtext.example.mydsl.myDsl.ArrayElement;
import org.xtext.example.mydsl.myDsl.ArrayType;
import org.xtext.example.mydsl.myDsl.Attribute;
import org.xtext.example.mydsl.myDsl.BasicType;
import org.xtext.example.mydsl.myDsl.BoolConstant;
import org.xtext.example.mydsl.myDsl.BoolType;
import org.xtext.example.mydsl.myDsl.Comparison;
import org.xtext.example.mydsl.myDsl.ElementType;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.EntityType;
import org.xtext.example.mydsl.myDsl.Equality;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.IntConstant;
import org.xtext.example.mydsl.myDsl.IntType;
import org.xtext.example.mydsl.myDsl.IsServer;
import org.xtext.example.mydsl.myDsl.Member;
import org.xtext.example.mydsl.myDsl.Minus;
import org.xtext.example.mydsl.myDsl.MulOrDiv;
import org.xtext.example.mydsl.myDsl.Not;
import org.xtext.example.mydsl.myDsl.Or;
import org.xtext.example.mydsl.myDsl.Plus;
import org.xtext.example.mydsl.myDsl.Rule;
import org.xtext.example.mydsl.myDsl.StringConstant;
import org.xtext.example.mydsl.myDsl.StringType;
import org.xtext.example.mydsl.myDsl.VariableConstant;
import org.xtext.example.mydsl.myDsl.Verb;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ArrayList<Verb> verbs = new ArrayList<Verb>();
    ArrayList<Entity> entities = new ArrayList<Entity>();
    ArrayList<Entity> serverEntities = new ArrayList<Entity>();
    Iterable<Entity> _filter = Iterables.<Entity>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Entity.class);
    for (final Entity a : _filter) {
      IsServer _is = a.getIs();
      boolean _tripleNotEquals = (_is != null);
      if (_tripleNotEquals) {
        serverEntities.add(a);
      }
    }
    Iterable<Member> _filter_1 = Iterables.<Member>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Member.class);
    for (final Member e : _filter_1) {
      boolean _matched = false;
      if (e instanceof Entity) {
        _matched=true;
        String _name = ((Entity)e).getName();
        String _plus = (_name + ".js");
        fsa.generateFile(_plus, 
          this.compile(((Entity)e)));
        entities.add(((Entity)e));
      }
      if (!_matched) {
        if (e instanceof Verb) {
          _matched=true;
          verbs.add(((Verb)e));
        }
      }
    }
    ArrayList<String> serverNames = new ArrayList<String>();
    for (final Entity e_1 : serverEntities) {
      serverNames.add(e_1.getName());
    }
    for (final Verb v : verbs) {
      boolean _contains = serverNames.contains(v.getQa());
      boolean _not = (!_contains);
      if (_not) {
        throw new Error("One or more Verbs have wrong ServerEntity name.");
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("const Express = require(\'express\')");
    _builder.newLine();
    _builder.append("const app = Express();");
    _builder.newLine();
    _builder.append("var http = require(\'http\').Server(app);");
    _builder.newLine();
    _builder.newLine();
    {
      for(final Entity e_2 : entities) {
        _builder.append("const ");
        String _name = e_2.getName();
        _builder.append(_name);
        _builder.append(" = require(\"./");
        String _name_1 = e_2.getName();
        _builder.append(_name_1);
        _builder.append(".js\")");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final Verb v_1 : verbs) {
        _builder.append("\t");
        CharSequence _generateVerb = this.generateVerb(v_1);
        _builder.append(_generateVerb, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final Entity ent : serverEntities) {
        _builder.append("http.listen(");
        String _name_2 = ent.getName();
        _builder.append(_name_2);
        _builder.append(".PORT, ");
        String _name_3 = ent.getName();
        _builder.append(_name_3);
        _builder.append(".DOMAIN, function () ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("console.log(\'listening on port \' + ");
        String _name_4 = ent.getName();
        _builder.append(_name_4, "\t\t    ");
        _builder.append(".PORT + \' on Domain:\' + ");
        String _name_5 = ent.getName();
        _builder.append(_name_5, "\t\t    ");
        _builder.append(".DOMAIN)");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("})");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.newLine();
        _builder.append("setInterval(resetRequestAmount, 2000)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("function resetRequestAmount(){");
        _builder.newLine();
        _builder.append("\t");
        String _name_6 = ent.getName();
        _builder.append(_name_6, "\t");
        _builder.append(".amountOfRequests = 0");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    fsa.generateFile("Main.js", _builder);
  }
  
  public CharSequence compile(final Entity entity) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("var ");
    String _name = entity.getName();
    _builder.append(_name);
    _builder.append(" = {}");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = entity.getAttributes();
      for(final Attribute attribute : _attributes) {
        CharSequence _generateAttribute = this.generateAttribute(attribute.getValue().getElementType(), entity.getName(), attribute.getName());
        _builder.append(_generateAttribute);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("module.exports = ");
    String _name_1 = entity.getName();
    _builder.append(_name_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateAttribute(final EntityType entityType, final String entityName, final String attributeName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(entityName);
    _builder.append(".");
    _builder.append(attributeName);
    _builder.append(" = require(\"./");
    String _name = entityType.getEntity().getName();
    _builder.append(_name);
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateAttribute(final BasicType basicType, final String entityName, final String attributeName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(entityName);
    _builder.append(".");
    _builder.append(attributeName);
    _builder.append(" = ");
    Object _checkBasicType = this.checkBasicType(basicType);
    _builder.append(_checkBasicType);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateAttribute(final ArrayType arrayType, final String entityName, final String attributeName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(entityName);
    _builder.append(".");
    _builder.append(attributeName);
    _builder.append(" = [");
    {
      EList<ArrayElement> _arrayElements = arrayType.getArrayElements();
      for(final ArrayElement ae : _arrayElements) {
        _builder.append(" ");
        Object _checkBasicType = this.checkBasicType(ae.getValue());
        _builder.append(_checkBasicType);
        _builder.append(", ");
      }
    }
    _builder.append("]");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateVerb(final Verb verb) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Rule> _rules = verb.getRules();
        for(final Rule rule : _rules) {
          {
            EList<ArrayElement> _arrayElements = rule.getUrl().getArrayElements();
            for(final ArrayElement url : _arrayElements) {
              BasicType bt = url.getValue();
              _builder.newLineIfNotEmpty();
              String _switchResult = null;
              boolean _matched = false;
              if (bt instanceof StringType) {
                _matched=true;
                _switchResult = ((StringType)bt).getValue();
              }
              if (!_matched) {
                throw new Exception("URL has to be of type StringType");
              }
              String urlValue = _switchResult;
              _builder.newLineIfNotEmpty();
              _builder.newLine();
              _builder.append("app.");
              String _verb = verb.getVerb();
              _builder.append(_verb);
              _builder.append("(\"/");
              _builder.append(urlValue);
              _builder.append("\",");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("function (req, res){");
              _builder.newLine();
              _builder.append("\t\t\t");
              String _qa = verb.getQa();
              _builder.append(_qa, "\t\t\t");
              _builder.append(".amountOfRequests++;");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t");
              CharSequence _checkCondition = this.checkCondition(rule);
              _builder.append(_checkCondition, "\t\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("}");
              _builder.newLine();
              _builder.append(")");
              _builder.newLine();
            }
          }
        }
      }
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public CharSequence checkCondition(final Rule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if(");
    String _generateExpression = this.generateExpression(rule.getCondition().getExpression());
    _builder.append(_generateExpression);
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("res.send(\"Welcome to our External DSL!\")");
    _builder.newLine();
    _builder.append("} else");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("res.status(400).send(\"bad request\");");
    _builder.newLine();
    return _builder;
  }
  
  public String generateExpression(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof IntConstant) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      int _value = ((IntConstant)exp).getValue();
      _builder.append(_value);
      _switchResult = _builder.toString();
    }
    if (!_matched) {
      if (exp instanceof VariableConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        EObject _eContainer = ((VariableConstant)exp).getValue().eContainer();
        String _name = ((Entity) _eContainer).getName();
        _builder.append(_name);
        _builder.append(".");
        String _name_1 = ((VariableConstant)exp).getValue().getName();
        _builder.append(_name_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof BoolConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        boolean _parseBoolean = Boolean.parseBoolean(((BoolConstant)exp).getValue());
        _builder.append(_parseBoolean);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof StringConstant) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = ((StringConstant)exp).getValue();
        _builder.append(_value);
        _builder.append("\"");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Not) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("!");
        String _generateExpression = this.generateExpression(((Not)exp).getExpression());
        _builder.append(_generateExpression);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof MulOrDiv) {
        _matched=true;
        String _xblockexpression = null;
        {
          final String left = this.generateExpression(((MulOrDiv)exp).getLeft());
          final String right = this.generateExpression(((MulOrDiv)exp).getRight());
          String _xifexpression = null;
          String _op = ((MulOrDiv)exp).getOp();
          boolean _equals = Objects.equal(_op, "*");
          if (_equals) {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append(left);
            _builder.append(" * ");
            _builder.append(right);
            _xifexpression = _builder.toString();
          } else {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append(left);
            _builder_1.append(" / ");
            _builder_1.append(right);
            _xifexpression = _builder_1.toString();
          }
          _xblockexpression = _xifexpression;
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = this.generateExpression(((Minus)exp).getLeft());
        _builder.append(_generateExpression);
        _builder.append(" - ");
        String _generateExpression_1 = this.generateExpression(((Minus)exp).getRight());
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Plus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = this.generateExpression(((Plus)exp).getLeft());
        _builder.append(_generateExpression);
        _builder.append(" + ");
        String _generateExpression_1 = this.generateExpression(((Plus)exp).getRight());
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Equality) {
        _matched=true;
        String _xifexpression = null;
        String _op = ((Equality)exp).getOp();
        boolean _equals = Objects.equal(_op, "==");
        if (_equals) {
          StringConcatenation _builder = new StringConcatenation();
          String _generateExpression = this.generateExpression(((Equality)exp).getLeft());
          _builder.append(_generateExpression);
          _builder.append(" == ");
          String _generateExpression_1 = this.generateExpression(((Equality)exp).getRight());
          _builder.append(_generateExpression_1);
          _xifexpression = _builder.toString();
        } else {
          StringConcatenation _builder_1 = new StringConcatenation();
          String _generateExpression_2 = this.generateExpression(((Equality)exp).getLeft());
          _builder_1.append(_generateExpression_2);
          _builder_1.append(" != ");
          String _generateExpression_3 = this.generateExpression(((Equality)exp).getRight());
          _builder_1.append(_generateExpression_3);
          _xifexpression = _builder_1.toString();
        }
        _switchResult = _xifexpression;
      }
    }
    if (!_matched) {
      if (exp instanceof And) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = this.generateExpression(((And)exp).getLeft());
        _builder.append(_generateExpression);
        _builder.append(" && ");
        String _generateExpression_1 = this.generateExpression(((And)exp).getRight());
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Or) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _generateExpression = this.generateExpression(((Or)exp).getLeft());
        _builder.append(_generateExpression);
        _builder.append(" || ");
        String _generateExpression_1 = this.generateExpression(((Or)exp).getRight());
        _builder.append(_generateExpression_1);
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      if (exp instanceof Comparison) {
        _matched=true;
        String _xblockexpression = null;
        {
          final String left = this.generateExpression(((Comparison)exp).getLeft());
          final String right = this.generateExpression(((Comparison)exp).getRight());
          String _switchResult_1 = null;
          String _op = ((Comparison)exp).getOp();
          if (_op != null) {
            switch (_op) {
              case "<":
                StringConcatenation _builder = new StringConcatenation();
                _builder.append(left);
                _builder.append(" < ");
                _builder.append(right);
                _switchResult_1 = _builder.toString();
                break;
              case ">":
                StringConcatenation _builder_1 = new StringConcatenation();
                _builder_1.append(left);
                _builder_1.append(" > ");
                _builder_1.append(right);
                _switchResult_1 = _builder_1.toString();
                break;
              case ">=":
                StringConcatenation _builder_2 = new StringConcatenation();
                _builder_2.append(left);
                _builder_2.append(" >= ");
                _builder_2.append(right);
                _switchResult_1 = _builder_2.toString();
                break;
              case "<=":
                StringConcatenation _builder_3 = new StringConcatenation();
                _builder_3.append(left);
                _builder_3.append(" <= ");
                _builder_3.append(right);
                _switchResult_1 = _builder_3.toString();
                break;
              default:
                _switchResult_1 = "";
                break;
            }
          } else {
            _switchResult_1 = "";
          }
          _xblockexpression = _switchResult_1;
        }
        _switchResult = _xblockexpression;
      }
    }
    return _switchResult;
  }
  
  public Object checkBasicType(final BasicType bt) {
    Object _switchResult = null;
    boolean _matched = false;
    if (bt instanceof IntType) {
      _matched=true;
      _switchResult = Integer.valueOf(((IntType)bt).getValue());
    }
    if (!_matched) {
      if (bt instanceof StringType) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\"");
        String _value = ((StringType)bt).getValue();
        _builder.append(_value);
        _builder.append("\"");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (bt instanceof BoolType) {
        _matched=true;
        _switchResult = ((BoolType)bt).getValue();
      }
    }
    return _switchResult;
  }
  
  public CharSequence generateAttribute(final ElementType arrayType, final String entityName, final String attributeName) {
    if (arrayType instanceof ArrayType) {
      return _generateAttribute((ArrayType)arrayType, entityName, attributeName);
    } else if (arrayType instanceof BasicType) {
      return _generateAttribute((BasicType)arrayType, entityName, attributeName);
    } else if (arrayType instanceof EntityType) {
      return _generateAttribute((EntityType)arrayType, entityName, attributeName);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(arrayType, entityName, attributeName).toString());
    }
  }
}
