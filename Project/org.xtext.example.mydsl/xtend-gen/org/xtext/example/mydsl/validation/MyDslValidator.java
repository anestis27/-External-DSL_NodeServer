/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.xtext.example.mydsl.myDsl.ArrayElement;
import org.xtext.example.mydsl.myDsl.ArrayType;
import org.xtext.example.mydsl.myDsl.Attribute;
import org.xtext.example.mydsl.myDsl.BasicType;
import org.xtext.example.mydsl.myDsl.ElementType;
import org.xtext.example.mydsl.myDsl.Entity;
import org.xtext.example.mydsl.myDsl.IntType;
import org.xtext.example.mydsl.myDsl.IsServer;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Rule;
import org.xtext.example.mydsl.myDsl.StringType;
import org.xtext.example.mydsl.myDsl.Verb;
import org.xtext.example.mydsl.validation.AbstractMyDslValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  @Check(CheckType.FAST)
  public void chechTheServer(final Entity ent) {
    IsServer _is = ent.getIs();
    boolean _tripleNotEquals = (_is != null);
    if (_tripleNotEquals) {
      final List<String> myList = new ArrayList<String>();
      EList<Attribute> _attributes = ent.getAttributes();
      for (final Attribute a : _attributes) {
        {
          myList.add(a.getName());
          String _name = a.getName();
          boolean _equals = Objects.equal(_name, "DOMAIN");
          if (_equals) {
            this.checkDOMAIN(a);
          }
          String _name_1 = a.getName();
          boolean _equals_1 = Objects.equal(_name_1, "PORT");
          if (_equals_1) {
            this.checkPORT(a);
          }
          String _name_2 = a.getName();
          boolean _equals_2 = Objects.equal(_name_2, "URL");
          if (_equals_2) {
            this.checkURL(a);
          }
          String _name_3 = a.getName();
          boolean _equals_3 = Objects.equal(_name_3, "amountOfRequests");
          if (_equals_3) {
            this.checkamountOfRequests(a);
          }
        }
      }
      boolean _contains = myList.contains("DOMAIN");
      boolean _not = (!_contains);
      if (_not) {
        this.error("There is no DOMAIN.", MyDslPackage.Literals.ENTITY__NAME);
      }
      boolean _contains_1 = myList.contains("PORT");
      boolean _not_1 = (!_contains_1);
      if (_not_1) {
        this.error("There is no no PORT.", MyDslPackage.Literals.ENTITY__NAME);
      }
      boolean _contains_2 = myList.contains("URL");
      boolean _not_2 = (!_contains_2);
      if (_not_2) {
        this.error("There is no URL.", MyDslPackage.Literals.ENTITY__NAME);
      }
      boolean _contains_3 = myList.contains("amountOfRequests");
      boolean _not_3 = (!_contains_3);
      if (_not_3) {
        this.error("There is no amountOfRequests.", MyDslPackage.Literals.ENTITY__NAME);
      }
    }
  }
  
  public void checkDOMAIN(final Attribute atr) {
    Pattern domainName = Pattern.compile(
      "^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][a-zA-Z0-9-_]{1,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,6}|[a-zA-Z0-9-]{2,30}\\.[a-zA-Z]{2,3})$");
    Pattern domainIP = Pattern.compile("^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$");
    ElementType valueType = atr.getValue().getElementType();
    boolean isStringType = false;
    boolean istheRightForm = false;
    boolean _matched = false;
    if (valueType instanceof StringType) {
      _matched=true;
      isStringType = true;
    }
    boolean _matched_1 = false;
    if (valueType instanceof StringType) {
      _matched_1=true;
      istheRightForm = (domainName.matcher(((StringType)valueType).getValue()).matches() || domainIP.matcher(((StringType)valueType).getValue()).matches());
    }
    if ((!isStringType)) {
      this.error("Problem with the DOMAIN value.", MyDslPackage.Literals.ENTITY__NAME);
    }
    if ((!istheRightForm)) {
      this.warning("Domain value might be wrong", MyDslPackage.Literals.ENTITY__NAME);
    }
  }
  
  public void checkPORT(final Attribute atr) {
    boolean isIntType = false;
    ElementType _elementType = atr.getValue().getElementType();
    boolean _matched = false;
    if (_elementType instanceof IntType) {
      _matched=true;
      isIntType = true;
    }
    if ((!isIntType)) {
      this.error("PORT value should be a positive Integer.", MyDslPackage.Literals.ENTITY__NAME);
    }
  }
  
  public void checkURL(final Attribute atr) {
    boolean isArrayType = false;
    ElementType _elementType = atr.getValue().getElementType();
    boolean _matched = false;
    if (_elementType instanceof ArrayType) {
      _matched=true;
      isArrayType = true;
    }
    if ((!isArrayType)) {
      this.error("URL value should be an Array.", MyDslPackage.Literals.ENTITY__NAME);
    } else {
      ElementType _elementType_1 = atr.getValue().getElementType();
      final ArrayType array = ((ArrayType) _elementType_1);
      EList<ArrayElement> _arrayElements = array.getArrayElements();
      for (final ArrayElement a : _arrayElements) {
        BasicType _value = a.getValue();
        boolean _matched_1 = false;
        if (_value instanceof StringType) {
          _matched_1=true;
          a.getValue();
        }
        if (!_matched_1) {
          this.error("URL\'s Array\'s value\'s should be a String.", MyDslPackage.Literals.ENTITY__NAME);
        }
      }
    }
  }
  
  public void checkamountOfRequests(final Attribute atr) {
    boolean isIntType = false;
    ElementType _elementType = atr.getValue().getElementType();
    boolean _matched = false;
    if (_elementType instanceof IntType) {
      _matched=true;
      isIntType = true;
    }
    if ((!isIntType)) {
      this.error("AmountOfRequests value should be a positive Integer.", MyDslPackage.Literals.ENTITY__NAME);
    }
  }
  
  @Check
  public Exception checkVerb(final Verb v) {
    Exception _xtrycatchfinallyexpression = null;
    try {
      int i = 0;
      for (i = 0; (i < v.getRules().get((v.getRules().size() - 1)).getUrl().getArrayElements().size()); i++) {
        {
          EList<Rule> _rules = v.getRules();
          int _size = v.getRules().size();
          int _minus = (_size - 1);
          final BasicType array = _rules.get(_minus).getUrl().getArrayElements().get(i).getValue();
          boolean _matched = false;
          if (array instanceof StringType) {
            _matched=true;
            ((StringType)array).getValue();
          }
          if (!_matched) {
            this.error("Return Array of URL should be a String.", MyDslPackage.Literals.VERB__VERB);
          }
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof Exception) {
        final Exception e = (Exception)_t;
        String _string = e.toString();
        _xtrycatchfinallyexpression = new Exception(_string);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return _xtrycatchfinallyexpression;
  }
}
